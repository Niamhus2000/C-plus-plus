//a program to implement two methods of searching through the following graph

//              E       H
//              | 3     | 1
//              C - 2 - F  - 2 - I
//             / 2       4\       \
//    A - 1 - B            J       \
//            \ 2      1/     \5    \
//             D - 2 - G - 3 - L    /
//                     \2          / 11
//                      K ------- /   


//A B C D E F G H I J K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z
//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25


#include<stdio.h>
#include <iostream>
using namespace std;

#define NUMBER_OF_VERTICES 12
#define INFINITY 999

//I decided to use global variables rather than make a struct and use pointers 
int G[NUMBER_OF_VERTICES][NUMBER_OF_VERTICES];
bool visited[NUMBER_OF_VERTICES];

//Dijkstra variables
int previous[NUMBER_OF_VERTICES];
int weights[NUMBER_OF_VERTICES];
int minDistance = INFINITY;
int start;
int closestNodeAvail;

//declare functions
bool DFS(int start, int finding);
void setMatrixDFS();
void setMatrixDij();
int getclosestNodeAvail();
bool dijkstra(int start, int finding);
void printPath(int start, int finding);

int main() 
{
	int type;
	bool found;
	for (int i = 0; i < NUMBER_OF_VERTICES; i++)
	{
		for (int j = 0; j< NUMBER_OF_VERTICES; j++)
		{
			G[i][j] = 0;
		}
	}

	cout << "Please make a selection: \n1. Depth First Search\n2. Dijkstra's Algorithm\n";
	cin >> type;
	while (type > 2)
	{
		cout << "Invalid selection, please choose again\n";
		cin >> type;
	}

	if (type == 1)
	{
		setMatrixDFS();
		//found = DFS(0, 23);    //A to X
		found = DFS(10, 1);      //K to B
		if (found == true)
			cout << "True\n";
		else if (found == false)
			cout << "False \n";
	}

	else
	{
		setMatrixDij();
		found = dijkstra(0, 23);   //A to X
		//found = dijkstra(0, 9);  //A to J
		if (found == true)
			cout << "True\n";
		else if (found == false)
			cout << "False \n";
	}

	int x;
	cin >> x; //to keep the window open
	return 0;
}


//Depth first search is a recursive function
//it goes as far down one path as possible until the vertex has no more connecting nodes that haven't already been visited
//Then recurses along the other vertexes until all of them have been visited
//returns true if the vertex that we are searching for is in the graph and false if it is not
bool DFS(int start, int finding)
{
	bool test = false;
	cout << (char)(start + 65) << " ";
	visited[start] = true;

	if (finding == start)
	{
		cout << "Target Found\n";
		return true;
	}

	else
	{
		for (int i = 0; i < NUMBER_OF_VERTICES; i++)
		{
			if (visited[i] == false && G[start][i] == 1)
				test = DFS(i, finding);
			if (test == true)
			{
				return true;
			}

		}
	}

	return false;
}
	
//I set up the matrix here and initialise visited just to main the main less clunky and more readable
void setMatrixDFS()
{
	G[0][1] = 1;
	G[1][0] = 1;
	G[1][2] = 1;
	G[1][3] = 1;
	G[2][1] = 1;
	G[2][4] = 1;
	G[2][5] = 1;
	G[3][1] = 1;
	G[3][6] = 1;
	G[4][2] = 1;
	G[5][2] = 1;
	G[5][7] = 1;
	G[5][8] = 1;
	G[5][9] = 1;
	G[6][3] = 1;
	G[6][9] = 1;
	G[6][10] = 1;
	G[6][11] = 1;
	G[7][5] = 1;
	G[8][5] = 1;
	G[8][10] = 1;
	G[9][5] = 1;
	G[9][6] = 1;
	G[9][11] = 1;
	G[10][6] = 1;
	G[10][8] = 1;
	G[11][6] = 1;
	G[11][9] = 1;

	//visited is initialized to zero
	for (int h = 0; h < NUMBER_OF_VERTICES; h++)
	{
		visited[h] = false;
	}
}

//I set up the matrix here and initialise visited, previous and weights just to main the main less clunky and more readable
void setMatrixDij()
{
	G[0][1] = 1;
	G[1][0] = 1;
	G[1][2] = 2;
	G[1][3] = 2;
	G[2][1] = 2;
	G[2][4] = 3;
	G[2][5] = 2;
	G[3][1] = 2;
	G[3][6] = 2;
	G[4][2] = 3;
	G[5][2] = 2;
	G[5][7] = 1;
	G[5][8] = 2;
	G[5][9] = 4;
	G[6][3] = 2;
	G[6][9] = 1;
	G[6][10] = 2;
	G[6][11] = 3;
	G[7][5] = 1;
	G[8][5] = 2;
	G[8][10] = 11;
	G[9][5] = 4;
	G[9][6] = 1;
	G[9][11] = 5;
	G[10][6] = 2;
	G[10][8] = 11;
	G[11][6] = 3;
	G[11][9] = 5;

	//initialise visited, previous and weights
	for (int i = 0; i < NUMBER_OF_VERTICES; i++)
	{
		visited[i] = false;
		previous[i] = -1;
		weights[i] = INFINITY;
	}
}

//Finds the shortest route for any vertex to another by calculating the weights of all the connecting vertices
//returns true if the vertex that we are searching for is in the graph and false if it is not
bool dijkstra(int start, int finding)
{
	bool flag = false;
	weights[start] = 0;
	int count = 0;
	while (count < NUMBER_OF_VERTICES)
	{
		closestNodeAvail = getclosestNodeAvail();
		//cout << "Closest is: " << closestNodeAvail << endl;
		visited[closestNodeAvail] = true;
		for (int k = 0; k < NUMBER_OF_VERTICES; k++)
		{
			if (visited[k] == false && G[closestNodeAvail][k]  > 0)
			{
				//cout << "Weights[" << k << "] is: " << weights[k] << "   Weights closest is: " << weights[closestNodeAvail] << "   G is: " << G[closestNodeAvail][k] << endl;
				if (weights[k] > weights[closestNodeAvail] + G[closestNodeAvail][k])
				{
					weights[k] = weights[closestNodeAvail] + G[closestNodeAvail][k];
					previous[k] = closestNodeAvail;
					if (k == finding)
					{
						flag = true;
					}
				}
			}
		}
		count++;
	}

	if (flag == true)
	{
		cout << "Dijkstra path from " << (char)(start + 65) << endl;
		printPath(start, finding);
		return true;
	}
	else
	{
		for (int h = 0; h < NUMBER_OF_VERTICES; h++)
		{
			printPath(start, h);
			cout << endl;
		}
		return false;
	}
}


//calculates the distance from each vertex to all the other non-visited vertices, the one with the shortest distance is the closest vertex
int getclosestNodeAvail()
{
	int minDistance = INFINITY;
	int closestNodeAvail;
	for (int i = 0; i < NUMBER_OF_VERTICES; i++)
	{
		if (visited[i] == false && (weights[i] <= minDistance))
		{
			minDistance = weights[i];
			closestNodeAvail = i;
		}
	}
	return closestNodeAvail;
}

//prints the shortest path from the source to the vertex that we are looking for if it is in the graph
//if it is not in the graph it prints the shortest path from the start to each other vertex in the graph
void printPath(int start, int finding)
{
	if (finding == start)
		cout << (char)(finding + 65) << " length " << weights[finding] << endl;
	else if (previous[finding] == -1)
		cout << "No path from " << (char)(start + 65) << " to " << (char)(finding + 65) << endl;
	else
	{
		printPath(start, previous[finding]);
		cout << (char)(finding + 65) << " length " << weights[finding] << ", parent: " << (char)(previous[finding] + 65) << endl;
	}
}
